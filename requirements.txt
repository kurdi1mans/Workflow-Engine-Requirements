- The workflow engine must be built as a javascript library.
- From here on, the library will be referred to as the system.

- The library must provide functions to create its own datamodel inside a database as per the developers choosing
	- The developer might choose a separate database for the datamodel of the library
	- The developer might choose a separate schema for the datamodel of the library

- The library must provide functions to create/modify/delete Forms
	- Forms must contain blocks
	- Blocks contain fields
	- What fields will be read-only, editable, or required is not the concern of the functionality of form management
	- fields
		- field can auto-populate from other records
			- there has to be an option for specify if the auto-population is live, dead-on-arrival, or dead-on-condition
	- views

- The system must allow for merging records in the same register/sheets
- The system must allow for merging registers/sheets
	- This is necessary as you might need multiple registers/sheets to model the as-is business of diffferent organizations. Then, you might need to merge these registers/sheets (as part of the standardization process) according to the to-be business model.
- The system must allow for cloning records
- The system must provide drag-fill functionality for cells
- The system must provide real-time (multiplayer) collaboration capability.

- Transactional Processing
	- The system must allow for transactional processing
		- What kind of transactional processing??
			- Regular Single-Phase Transactions
			- Two-Phase Transactions
			- Saga Pattern
	- The system must allow for a balance sheet like functionality
		- Similar to SOV in Unifier
		- Similar to a booking calendar
		- Similar to seat availablity on air-planes
		- This requires transactional processing

- The system must provide functionality to provide digitally signed documents
	- This functionality must also allow integration with 3rd party service providers


- A point that is yet to be addressed in the design is the fact that different organizations (think Offshore Projects vs Onshore Projects in a Giant Oil Company) might requires slightly different fields for the same Process.
	- For example, Offshore projects involves working on Offshore Rigs which might require additional fields specific to this special case of working environment.
	- In general, fields might differ based on certain criteria related to Geography, Domain, Industry, ... etc.
	- Remember the case of the 21 different departments that were struggling to standardize their processes due to sheer variance in their nature and requirements.
	- A more specific example that I can recall is the funding mechanism for Offshore Projects.
		- The budgeting/funding mechanism was appropration-based due to the fact that Offshore Oil-Field Projects were more of giant iterations of an operation rather than project with a unqiue scope. They have to be dealth with as projects due to the sheer size. However, the funding mechanism is appropriation-based rather than budget-based due to the operation-like nature of these projects.
	- Should these be implemented as separate processes??
	- Should these be implemented as a single process with different field-level access control setups by an organization variant??

- Workflow Steps
	- Steps and Actions
		- definition of steps and actions
	- Validations
		- definition of validations per action
		- validations must be action specific. For example, if the selected action is to reject the record, there is no need to verify anything.
	- The workflow must provide steps for automated actions
		- send emails
		- run integrations
		- Exponential Back-Off
		- Rate Limiting
		- ... etc


- Types of Data and Data Structures
	- The system must allow for creation of tables/lineitems in a form.
	- Lineitems can be viewed in the record as tables or as tab that shows them as records on their own.
	- The system must allow for multi-leveled record creation in the form of parent-child relationship.
		- This allows establishing trees.
		- The system must also allow visualizaing this type of records as trees
	- The system must provide alternate views for the register/sheet
		- For example, if I want to view the record like a ticketing system (say Zoho Desk), the fields of the record should be shown on the side.
	- The system must provide multiple options for view of the log of the register/sheet
		- example Zoho Desk
			- View can be set to show the record field on the side
			- The main body of the record shows email threads
	- The system must allow for linking the records with email threads

- Custom Prints
	- The system must provide the capability to create custom prints
	- Custom prints must be built with blocks
	- Design of blocks must be generic and resuable
	- Blocks must be dynamic as per the data it receives
	- Custom prints must allow exporting to Excel, Word, PDF ... etc.

- Versions and Drafts
	- The system must provide versioning for records
